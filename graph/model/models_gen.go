// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Address struct {
	ID        string  `json:"id"`
	PostCode  string  `json:"postCode"`
	Address   string  `json:"address"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt string  `json:"updatedAt"`
	DeletedAt *string `json:"deletedAt,omitempty"`
}

type AddressInput struct {
	ID       string `json:"id"`
	PostCode string `json:"postCode"`
	Address  string `json:"address"`
}

type Attendance struct {
	ID        string     `json:"id"`
	UserID    string     `json:"userId"`
	StartTime string     `json:"startTime"`
	EndTime   *string    `json:"endTime,omitempty"`
	BreakTime *time.Time `json:"breakTime,omitempty"`
	CreatedAt string     `json:"createdAt"`
	UpdatedAt string     `json:"updatedAt"`
	DeletedAt *string    `json:"deletedAt,omitempty"`
}

type AttendanceInput struct {
	ID        string     `json:"id"`
	UserID    string     `json:"userId"`
	StartTime *string    `json:"startTime,omitempty"`
	EndTime   *string    `json:"endTime,omitempty"`
	BreakTime *time.Time `json:"breakTime,omitempty"`
}

type Department struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	AddressID string  `json:"addressId"`
	CreatedAt string  `json:"createdAt"`
	UpdatedAt string  `json:"updatedAt"`
	DeletedAt *string `json:"deletedAt,omitempty"`
}

type DepartmentInput struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	AddressID string `json:"addressId"`
}

type Invoice struct {
	ID            string  `json:"id"`
	UserID        string  `json:"userId"`
	AuthorizerID  string  `json:"authorizerId"`
	BillingDate   string  `json:"billingDate"`
	BillingAmount *int    `json:"billingAmount,omitempty"`
	CreatedAt     string  `json:"createdAt"`
	UpdatedAt     string  `json:"updatedAt"`
	DeletedAt     *string `json:"deletedAt,omitempty"`
}

type InvoiceInput struct {
	ID            string `json:"id"`
	UserID        string `json:"userId"`
	AuthorizerID  string `json:"authorizerId"`
	BillingDate   string `json:"billingDate"`
	BillingAmount *int   `json:"billingAmount,omitempty"`
}

type LimitOffset struct {
	Limit  *int `json:"limit,omitempty"`
	Offset *int `json:"offset,omitempty"`
}

type ListAttendanceInput struct {
	UserID      *string      `json:"userId,omitempty"`
	LimitOffset *LimitOffset `json:"LimitOffset,omitempty"`
}

type User struct {
	ID               string           `json:"id"`
	UserID           string           `json:"userId"`
	Name             string           `json:"name"`
	Password         string           `json:"password"`
	MailAddress      *string          `json:"mailAddress,omitempty"`
	PhoneNumber      *string          `json:"phoneNumber,omitempty"`
	Status           UserStatus       `json:"status"`
	Role             *UserRole        `json:"role,omitempty"`
	EmploymentStatus EmploymentStatus `json:"employmentStatus"`
	UnitPrice        int              `json:"unitPrice"`
	DepartmentID     string           `json:"departmentId"`
	CreatedAt        string           `json:"createdAt"`
	UpdatedAt        string           `json:"updatedAt"`
	DeletedAt        *string          `json:"deletedAt,omitempty"`
}

type UserInput struct {
	ID               string           `json:"id"`
	UserID           string           `json:"userId"`
	Name             string           `json:"name"`
	Password         string           `json:"password"`
	MailAddress      *string          `json:"mailAddress,omitempty"`
	PhoneNumber      *string          `json:"phoneNumber,omitempty"`
	Status           UserStatus       `json:"status"`
	Role             *UserRole        `json:"role,omitempty"`
	EmploymentStatus EmploymentStatus `json:"employmentStatus"`
	UnitPrice        int              `json:"unitPrice"`
}

type EmploymentStatus string

const (
	EmploymentStatusAnnual  EmploymentStatus = "annual"
	EmploymentStatusMonthly EmploymentStatus = "monthly"
	EmploymentStatusHourly  EmploymentStatus = "hourly"
	EmploymentStatusDay     EmploymentStatus = "day"
	EmploymentStatusOther   EmploymentStatus = "other"
)

var AllEmploymentStatus = []EmploymentStatus{
	EmploymentStatusAnnual,
	EmploymentStatusMonthly,
	EmploymentStatusHourly,
	EmploymentStatusDay,
	EmploymentStatusOther,
}

func (e EmploymentStatus) IsValid() bool {
	switch e {
	case EmploymentStatusAnnual, EmploymentStatusMonthly, EmploymentStatusHourly, EmploymentStatusDay, EmploymentStatusOther:
		return true
	}
	return false
}

func (e EmploymentStatus) String() string {
	return string(e)
}

func (e *EmploymentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmploymentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmploymentStatus", str)
	}
	return nil
}

func (e EmploymentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserRole string

const (
	UserRoleAdmin      UserRole = "admin"
	UserRoleManager    UserRole = "manager"
	UserRoleAccountant UserRole = "accountant"
	UserRoleCommon     UserRole = "common"
)

var AllUserRole = []UserRole{
	UserRoleAdmin,
	UserRoleManager,
	UserRoleAccountant,
	UserRoleCommon,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin, UserRoleManager, UserRoleAccountant, UserRoleCommon:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserStatus string

const (
	UserStatusInit   UserStatus = "init"
	UserStatusActive UserStatus = "active"
	UserStatusOther  UserStatus = "other"
)

var AllUserStatus = []UserStatus{
	UserStatusInit,
	UserStatusActive,
	UserStatusOther,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusInit, UserStatusActive, UserStatusOther:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
