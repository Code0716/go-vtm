// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// adminUser一覧の取得
	// (GET /admin)
	GetAdminList(ctx echo.Context, params GetAdminListParams) error
	// member一覧の取得
	// (GET /admin/members)
	AdminGetMemberList(ctx echo.Context, params AdminGetMemberListParams) error
	// memberの登録
	// (POST /admin/members)
	AdminRegistMember(ctx echo.Context) error
	// admin登録
	// (POST /admin/regist)
	RegistAdmin(ctx echo.Context) error
	// adminUserの削除
	// (DELETE /admin/{uuid})
	DeleteAdminUser(ctx echo.Context, uuid string) error
	// adminUserの取得
	// (GET /admin/{uuid})
	GetAdminUser(ctx echo.Context, uuid string) error
	// adminUser情報更新
	// (PUT /admin/{uuid})
	UpdateAdminUser(ctx echo.Context, uuid string) error
	// login
	// (POST /login)
	Login(ctx echo.Context) error
	// member情報取得
	// (GET /members/{uuid})
	GetMember(ctx echo.Context, uuid string) error
	// member情報更新
	// (PUT /members/{uuid})
	UpdateMember(ctx echo.Context, uuid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAdminList converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdminList(ctx echo.Context) error {
	var err error

	ctx.Set(SecurityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAdminListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdminList(ctx, params)
	return err
}

// AdminGetMemberList converts echo context to params.
func (w *ServerInterfaceWrapper) AdminGetMemberList(ctx echo.Context) error {
	var err error

	ctx.Set(SecurityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminGetMemberListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminGetMemberList(ctx, params)
	return err
}

// AdminRegistMember converts echo context to params.
func (w *ServerInterfaceWrapper) AdminRegistMember(ctx echo.Context) error {
	var err error

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminRegistMember(ctx)
	return err
}

// RegistAdmin converts echo context to params.
func (w *ServerInterfaceWrapper) RegistAdmin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegistAdmin(ctx)
	return err
}

// DeleteAdminUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAdminUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAdminUser(ctx, uuid)
	return err
}

// GetAdminUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdminUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdminUser(ctx, uuid)
	return err
}

// UpdateAdminUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAdminUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateAdminUser(ctx, uuid)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// GetMember converts echo context to params.
func (w *ServerInterfaceWrapper) GetMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMember(ctx, uuid)
	return err
}

// UpdateMember converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateMember(ctx, uuid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/admin", wrapper.GetAdminList)
	router.GET(baseURL+"/admin/members", wrapper.AdminGetMemberList)
	router.POST(baseURL+"/admin/members", wrapper.AdminRegistMember)
	router.POST(baseURL+"/admin/regist", wrapper.RegistAdmin)
	router.DELETE(baseURL+"/admin/:uuid", wrapper.DeleteAdminUser)
	router.GET(baseURL+"/admin/:uuid", wrapper.GetAdminUser)
	router.PUT(baseURL+"/admin/:uuid", wrapper.UpdateAdminUser)
	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/members/:uuid", wrapper.GetMember)
	router.PUT(baseURL+"/members/:uuid", wrapper.UpdateMember)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa628Txxb/V6y59+Pe2OHeSyV/a6FCqCAqIj6hKBp2J/FQ74OZ2bRuZCm2C+LVErUV",
	"NNAKkCiPqk2h8AH64J8Z7JD/oprHPrw76zix45jCl2gzr3PmnN+Z85szXgG27wa+hzxGQXUFBJBAFzFE",
	"5H/HsIvZx6JJ/OcgahMcMOx7oArqoq8kx1NgASzazoWINIAFPOiiaAiwALVryIVqiUUY1hmo/r9iAdYI",
	"xCjsMbSECGg2LXBicZGiIom+7FQiCySqIWaRZolzDLKQFkiksnOgRDWkT6KWQhnB3hJoCikE0cD3KJJW",
	"/ZAQn5zULaLB9j2GPCY+YRDUsQ2F/PJZKpRYSa38b4IWQRX8q5w4rax6aVmuqqT1b4K3H/LOI975k3d+",
	"5u0XvPMD7zzl7RegaYGjHkPEg/U5RJYRUUuMVaF4mwbFXv1+sff9bd66wVv3eesL3vpJ/I20ld7RawlR",
	"7zsu9k5RRPJuSrosEBA/QIRhZWooehawk58T91hZf1nAJggy5CxAlp+3uf7H1tXfejd+BBZY9IkrxgAH",
	"MvQfhl1kWs1BdVS0WvfS5a31eztZzbSXo4fT07HHDv4P5MFuARfi+gJ0HIIoza8iektRr0GyAnx2lmw1",
	"jA4gpZ/6xKBt3GOahYiLKcUKZ/3zeg8fba2vmWbpGCwIX9OMMHAKPdy79ax3/fHwPpHhfS7EBDmgehpI",
	"SKXQpQ3UZ3srbYTUnq1E5RQG+9Sdj+X7Z84im4ndxPhPHyoFIRIPeRcqUxMqbw3oR0d6yGrIYzohFcOd",
	"d37h7ce8fY93nvbW27y1kU1+Wfi7iFK4ZFgq6jAYlPmfIIPPVPN2JovWNW3zkO+6vjcX2jaitHiXyml8",
	"taUija+2VJDITPqod3Gte1ml19tbN2/x1kbvyVeb3z4cvyV2sLPDMsKHOLCKBo7n2BrlaNhJcA8TJiYz",
	"xUysgMrlzGD7DhownrefSgJ4yWSMQofH07sXznc3XuzqFNrWoBkTyY1YAzGU489D8t2szZBYhw5Y4NXz",
	"1df3Hwjiz5BLhyTgscKQENjI7U8LNe3rOHLPmOitbs+5fIpTb80PSb2xEBBsm86t9fbW9W+6X3736uXd",
	"4WJupFQuzWc8IpKu/eK7Nd9DC15odrzsfTNyf9qS2kR9e9tlvlfQL471d6HxJoTGPxjku0C12BqyQ4JZ",
	"Y06kDgXZqEl8yzpTDUFHQlsXmmDIaj7Bn0vmm+gLA/wRaqjyCvYW/ah8A21pBD35kO+gynuzB0GuCLPM",
	"3O6Ve73VO5sbdzfXLoiFEXHpicU5RJYlREGNsYBWy2VbLzJj+25ZDMSsjtQSwALLiKgrDJidqcxUhCQ/",
	"QB4MMKiC/85UZg7Iay+rye2WJQsSX0uIFXA33v66e+169+UNyWFf8tY6X23zzk3JZ57LpP6Yt652r/36",
	"uvMXbz1QA4CUS6SZjjqgCo4gJmnkMUyZVCGpcJ42Z/RkSDlVAW1a245Oly+HGJ6uPTbnM1XCA5XKjkpx",
	"WRIvoCo/hyIvSQktR2DEPYfBeqqymeZuWXDnACZdGfnxavpS0r3zrLt2UUFS12jNSsZ2KZvqlemAki5N",
	"/TMvzEpD14WkEekidqmYHW9tKMUEmOGSAIQqlIB5sajCaDllSiNWeeeuwGJnbUx4lRocQUzltneoHYBa",
	"nf7HDVmlxpRgVimzDWCPa8PNi3Tr021QqssFrXXevlKIwJNoCVMWEyyRDBFlH/hOYwQHm4mD2mJpd/xB",
	"T5aDSjHbHJzNTQzVkKhzLzcHKrMTRLe5CrQ3YI8gMRVg560NpU8xzJPjmUicSmsbgS9HlUKKSAb5Odgr",
	"xKsEMC7AD64jK912V01Wc3d+HVXzii+lBaGSjO/b0hsbNUNTlz2PjH52YgZ+H+JXwhA7TeVZcTMdQJ91",
	"OTihIznQZ+qseapRFE0loUX0KC54fXJV0T0JjBgJ0aAX8v1lEUWl5r1hwtolBjgJ9+wHGRasQmplQJ01",
	"ufvZ2wq/SQFvyq5ggy5fFgjCItSdUplcv30VcthTsgQzDcCaJI0YG30Y8CStCUT6LXfo2p2aW1TBy74j",
	"9r8eZytuKQ2GYyGjBDVM//po5LBOCtyjx7WOpSgepiW8e53z3TtPlFYFbKbuL6kSoJm4q+5sXB/TrZOI",
	"q3G+9QzGdjxv75G84/Rk/snFrgi1dOkkqHSEnQh2trwUaNxpC6R4tJHj6LtoQnKKUk1cq9suyehSxZ4y",
	"l9mJl99Gg0R849dkYOLFBnVQ5aiI6izmIjE6hiMi+wqQcZyUg58tVW9J9Y79VzRDPSEW1v52/pKYOasz",
	"D9n9PGT6CiDbReVY6oUx41BH+X6FbY5fxGGrFhQCVKCFpJ56ykSfQTeoI/mSCQNcXp6VTxl6FXNY0hIM",
	"cBKKUS2yOd/8OwAA//8rTGsIRTEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
