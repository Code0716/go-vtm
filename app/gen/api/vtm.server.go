// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// adminUser一覧の取得
	// (GET /admin)
	GetAdminList(ctx echo.Context, params GetAdminListParams) error
	// member一覧の取得
	// (GET /admin/members)
	AdminGetMemberList(ctx echo.Context, params AdminGetMemberListParams) error
	// memberの登録
	// (POST /admin/members/regist)
	AdminRegistMember(ctx echo.Context) error
	// admin登録
	// (POST /admin/regist)
	RegistAdmin(ctx echo.Context) error
	// adminUserの削除
	// (DELETE /admin/{uuid})
	DeleteAdminUser(ctx echo.Context, uuid string) error
	// adminUserの取得
	// (GET /admin/{uuid})
	GetAdminUser(ctx echo.Context, uuid string) error
	// adminUser情報更新
	// (PUT /admin/{uuid})
	UpdateAdminUser(ctx echo.Context, uuid string) error
	// login
	// (POST /login)
	Login(ctx echo.Context) error
	// member情報取得
	// (GET /members/{uuid})
	GetMember(ctx echo.Context, uuid string) error
	// member情報更新
	// (PUT /members/{uuid})
	UpdateMember(ctx echo.Context, uuid string) error
	// 打刻
	// (POST /timestamp)
	Timestamp(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAdminList converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdminList(ctx echo.Context) error {
	var err error

	ctx.Set(SecurityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAdminListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdminList(ctx, params)
	return err
}

// AdminGetMemberList converts echo context to params.
func (w *ServerInterfaceWrapper) AdminGetMemberList(ctx echo.Context) error {
	var err error

	ctx.Set(SecurityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminGetMemberListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminGetMemberList(ctx, params)
	return err
}

// AdminRegistMember converts echo context to params.
func (w *ServerInterfaceWrapper) AdminRegistMember(ctx echo.Context) error {
	var err error

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminRegistMember(ctx)
	return err
}

// RegistAdmin converts echo context to params.
func (w *ServerInterfaceWrapper) RegistAdmin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegistAdmin(ctx)
	return err
}

// DeleteAdminUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAdminUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAdminUser(ctx, uuid)
	return err
}

// GetAdminUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdminUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdminUser(ctx, uuid)
	return err
}

// UpdateAdminUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAdminUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateAdminUser(ctx, uuid)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// GetMember converts echo context to params.
func (w *ServerInterfaceWrapper) GetMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMember(ctx, uuid)
	return err
}

// UpdateMember converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateMember(ctx, uuid)
	return err
}

// Timestamp converts echo context to params.
func (w *ServerInterfaceWrapper) Timestamp(ctx echo.Context) error {
	var err error

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Timestamp(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/admin", wrapper.GetAdminList)
	router.GET(baseURL+"/admin/members", wrapper.AdminGetMemberList)
	router.POST(baseURL+"/admin/members/regist", wrapper.AdminRegistMember)
	router.POST(baseURL+"/admin/regist", wrapper.RegistAdmin)
	router.DELETE(baseURL+"/admin/:uuid", wrapper.DeleteAdminUser)
	router.GET(baseURL+"/admin/:uuid", wrapper.GetAdminUser)
	router.PUT(baseURL+"/admin/:uuid", wrapper.UpdateAdminUser)
	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/members/:uuid", wrapper.GetMember)
	router.PUT(baseURL+"/members/:uuid", wrapper.UpdateMember)
	router.POST(baseURL+"/timestamp", wrapper.Timestamp)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
