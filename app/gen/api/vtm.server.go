// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// adminUser一覧の取得
	// (GET /admin)
	GetAdminList(ctx echo.Context, params GetAdminListParams) error
	// member一覧の取得
	// (GET /admin/members)
	AdminGetMemberList(ctx echo.Context, params AdminGetMemberListParams) error
	// memberの登録
	// (POST /admin/members/regist)
	AdminRegistMember(ctx echo.Context) error
	// admin登録
	// (POST /admin/regist)
	RegistAdmin(ctx echo.Context) error
	// adminUserの削除
	// (DELETE /admin/{uuid})
	DeleteAdminUser(ctx echo.Context, uuid string) error
	// adminUserの取得
	// (GET /admin/{uuid})
	GetAdminUser(ctx echo.Context, uuid string) error
	// adminUser情報更新
	// (PUT /admin/{uuid})
	UpdateAdminUser(ctx echo.Context, uuid string) error
	// login
	// (POST /login)
	Login(ctx echo.Context) error
	// member情報取得
	// (GET /members/{uuid})
	GetMember(ctx echo.Context, uuid string) error
	// member情報更新
	// (PUT /members/{uuid})
	UpdateMember(ctx echo.Context, uuid string) error
	// 打刻
	// (POST /timestamp)
	Timestamp(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAdminList converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdminList(ctx echo.Context) error {
	var err error

	ctx.Set(SecurityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAdminListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdminList(ctx, params)
	return err
}

// AdminGetMemberList converts echo context to params.
func (w *ServerInterfaceWrapper) AdminGetMemberList(ctx echo.Context) error {
	var err error

	ctx.Set(SecurityScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminGetMemberListParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminGetMemberList(ctx, params)
	return err
}

// AdminRegistMember converts echo context to params.
func (w *ServerInterfaceWrapper) AdminRegistMember(ctx echo.Context) error {
	var err error

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminRegistMember(ctx)
	return err
}

// RegistAdmin converts echo context to params.
func (w *ServerInterfaceWrapper) RegistAdmin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegistAdmin(ctx)
	return err
}

// DeleteAdminUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAdminUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAdminUser(ctx, uuid)
	return err
}

// GetAdminUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetAdminUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAdminUser(ctx, uuid)
	return err
}

// UpdateAdminUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAdminUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateAdminUser(ctx, uuid)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// GetMember converts echo context to params.
func (w *ServerInterfaceWrapper) GetMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMember(ctx, uuid)
	return err
}

// UpdateMember converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateMember(ctx, uuid)
	return err
}

// Timestamp converts echo context to params.
func (w *ServerInterfaceWrapper) Timestamp(ctx echo.Context) error {
	var err error

	ctx.Set(SecurityScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Timestamp(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/admin", wrapper.GetAdminList)
	router.GET(baseURL+"/admin/members", wrapper.AdminGetMemberList)
	router.POST(baseURL+"/admin/members/regist", wrapper.AdminRegistMember)
	router.POST(baseURL+"/admin/regist", wrapper.RegistAdmin)
	router.DELETE(baseURL+"/admin/:uuid", wrapper.DeleteAdminUser)
	router.GET(baseURL+"/admin/:uuid", wrapper.GetAdminUser)
	router.PUT(baseURL+"/admin/:uuid", wrapper.UpdateAdminUser)
	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/members/:uuid", wrapper.GetMember)
	router.PUT(baseURL+"/members/:uuid", wrapper.UpdateMember)
	router.POST(baseURL+"/timestamp", wrapper.Timestamp)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
